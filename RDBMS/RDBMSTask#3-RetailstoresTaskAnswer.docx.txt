Internship Task - RDBMS and SQL Task #3

(1)create database
query=>
CREATE DATABASE Retailstores;

(2)(2)Use Database
 Query=>
use Retailstores;

(3)create table Customers
Query=>
CREATE TABLE Customers(
customer_id INT Primary key,
first_name VARCHAR(100) NOT NULL,
last_name VARCHAR(100) NOT NULL,
email VARCHAR(100) NOT NULL,
phone VARCHAR(20) NOT NULL,
address TEXT NOT NULL,
join_date DATE
);

(4)create table Products
Query=>
CREATE TABLE Products(
product_id INT Primary key,
product_name VARCHAR(100) NOT NULL,
category VARCHAR(50),
price DECIMAL(10,2),
stock_quantity INT);

(5)create table Orders
Query=>
CREATE TABLE Orders(
order_id INT Primary key,
customer_id INT,
Foreign key (customer_id) References Customers(customer_id),
order_date DATE,
total_amount DECIMAL(10,2),
order_status VARCHAR(20)
);

(6)create table OrderDetails
Query=>
CREATE TABLE OrderDetails(
order_detail_id INT Primary key,
order_id INT,
Foreign key (order_id) References Orders(order_id),
product_id INT,
Foreign key (product_id)References Products(product_id),
quantity INT,
unit_price DECIMAL(10,2)   
);

(7)create table Payments
Query=>
CREATE TABLE Payments(
payment_id INT Primary key,
order_id INT,
Foreign key (order_id)References Orders(order_id),
payment_date DATE,
payment_amount DECIMAL(10,2), 
payment_method VARCHAR(20)    
);

(8)Insert data in table Customers
Query=>
INSERT INTO Customers 
VALUES
(1, 'seema', 'roy', 'seemaroy12@gmail.com', '8987574676', '123 Main St,indore', '2023-01-10'),
(2, 'anand', 'Sen', 'anandsen12@gmail.com', '8978490989', '456 new market,bhopal', '2022-12-15'),
(3, 'Anjali', 'Jangid', 'anjalijangid123@gmail.com', '8903454567', '789 vijay nagar,indore', '2021-08-20'),
(4, 'Sarah', 'solanki', 'sarahsolanki45@gmail.com', '7657489309', '101 college road,gwalior', '2022-05-05'),
(5, 'pankaj', 'solanki', 'pankajsolanki56@gmail.com', '9086456736', '234 main chouk,indore', '2021-11-12'),
(6, 'bhanu', 'sahu', 'bhanusahu32@gmail.com', '7849098756', '567 main bypass,rewa', '2023-03-01'),
(7, 'siya', 'Taylor', 'siyataylor@gmail.com', '9098678949', '890 bus stand,harda', '2022-07-18'),
(8, 'Matthew', 'roy', 'matthewroy@gmail.com', '9023456776', '123 station rd, dewas', '2021-10-25'),
(9, 'Sophia', 'roy', 'sophiaroy@gmail.com', '9098678909', '456 mahakal lok, ujjain', '2022-01-30'),
(10, 'David', 'barnar', 'davidbarnar@gmail.com', '9867556786', '789 main road,bhopal', '2023-06-05');


(9)Insert data in table Products
Query=>
INSERT INTO Products 
VALUES
(1, 'Laptop', 'Electronics', 8990.99, 50),
(2, 'Smartphone', 'Electronics', 6990.49, 120),
(3, 'Headphones', 'Accessories', 99.99, 200),
(4, 'Bluetooth Speaker', 'Accessories', 490.99, 150),
(5, 'Coffee Maker', 'Appliances', 79.99, 80),
(6, 'Microwave Oven', 'Appliances', 7049.99, 60),
(7, 'LED TV', 'Electronics', 8499.99, 40),
(8, 'Gaming Console', 'Electronics', 299.99, 30),
(9, 'Washing Machine', 'Appliances', 6399.99, 20),
(10, 'Refrigerator', 'Appliances', 9799.99, 25);


(10)Insert data in table Orders
Query=>
INSERT INTO Orders
VALUES
(101, 1, '2023-01-12', 150.75, 'Shipped'),
(102, 2, '2023-02-05', 245.50, 'Delivered'),
(103, 3, '2023-03-20', 89.99, 'Pending'),
(104, 4, '2023-04-15', 320.00, 'Shipped'),
(105, 5, '2023-05-22', 499.99, 'Delivered'),
(106, 6, '2023-06-10', 119.50, 'Cancelled'),
(107, 7, '2023-07-01', 245.00, 'Shipped'),
(108, 8, '2023-08-15', 149.99, 'Pending'),
(109, 9, '2023-09-03', 300.00, 'Delivered'),
(110, 10, '2023-10-05', 59.95, 'Shipped');

(11)Insert data in table OrderDetails
Query=>
INSERT INTO OrderDetails 
VALUES
(201, 101, 1, 1, 899.99), 
(202, 102, 3, 2, 99.99),  
(203, 103, 2, 1, 699.49), 
(204, 104, 4, 1, 49.99),   
(205, 105, 5, 1, 79.99),   
(206, 106, 7, 1, 499.99), 
(207, 107, 6, 2, 149.99),  
(208, 108, 8, 1, 299.99), 
(209, 109, 9, 1, 399.99),  
(210, 110, 10, 1, 799.99);

(12)Insert data in table  Payments
Query=>
INSERT INTO Payments 
VALUES
(301, 101, '2023-01-13', 150.75, 'Credit Card'),
(302, 102, '2023-02-06', 245.50, 'PayPal'),
(303, 103, '2023-03-21', 89.99, 'Debit Card'),
(304, 104, '2023-04-16', 320.00, 'Credit Card'),
(305, 105, '2023-05-23', 499.99, 'Cash'),
(306, 106, '2023-06-11', 119.50, 'Credit Card'),
(307, 107, '2023-07-02', 245.00, 'PayPal'),
(308, 108, '2023-08-16', 149.99, 'Debit Card'),
(309, 109, '2023-09-04', 300.00, 'Credit Card'),
(310, 110, '2023-10-06', 59.95, 'Cash');
===========================================================================================================================================================
SQL Queries for the Case Study
1. Find the Total Number of Orders for Each Customer
Query=>
SELECT customer_id, COUNT(*) AS total_orders
FROM Orders
GROUP BY customer_id;

2. Find the Total Sales Amount for Each Product (Revenue per Product)
Query=>
SELECT products.product_id, products.product_name, SUM(orderdetails.quantity * orderdetails.unit_price) AS total_sales
FROM OrderDetails 
JOIN Products  ON orderdetails.product_id = products.product_id
GROUP BY products.product_id;

3. Find the Most Expensive Product Sold
Query=>
SELECT products.product_name, MAX(orderdetails.unit_price) AS most_expensive_price
FROM OrderDetails 
JOIN Products  ON orderdetails.product_id = products.product_id
GROUP BY products.product_name
ORDER BY most_expensive_price DESC
LIMIT 1;

4. Get the List of Customers Who Have Placed Orders in the Last 30 Days
Query=>
SELECT customers.customer_id, customers.first_name, customers.last_name, customers.email
FROM Customers 
JOIN Orders  ON customers.customer_id = orders.customer_id
WHERE orders.order_date >= CURDATE() - INTERVAL 30 DAY;

5. Calculate the Total Amount Paid by Each Customer
Query=>
SELECT c.customer_id, c.first_name, c.last_name, SUM(p.payment_amount) AS total_paid
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN Payments p ON o.order_id = p.order_id
GROUP BY c.customer_id;

6. Get the Number of Products Sold by Category
Query=>
SELECT p.category, SUM(od.quantity) AS total_products_sold
FROM OrderDetails od
JOIN Products p ON od.product_id = p.product_id
GROUP BY p.category;

7. List All Orders That Are Pending (i.e., Orders that haven't been shipped yet)
Query=>
SELECT o.order_id, o.customer_id, o.order_date, o.total_amount, o.order_status
FROM Orders o
WHERE o.order_status = 'Pending';

8. Find the Average Order Value (Total Order Amount / Number of Orders)
Query=>
SELECT AVG(total_amount) AS average_order_value
FROM Orders;

9. List the Top 5 Customers Who Have Spent the Most Money
Query=>
SELECT c.customer_id, c.first_name, c.last_name, SUM(p.payment_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
JOIN Payments p ON o.order_id = p.order_id
GROUP BY c.customer_id
ORDER BY total_spent DESC
LIMIT 5;

10. Find the Products That Have Never Been Sold
Query=>
SELECT p.product_name
FROM Products p
LEFT JOIN OrderDetails od ON p.product_id = od.product_id
WHERE od.product_id IS NULL;

=============================================================================================================================================